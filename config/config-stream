# !mandatory! task to execute, operation available: "training" (for embedding files), "match" (for batch ER task), "test" (for verify accuracy of matching), "smatch" for streaming data, "experiment" for calculating pre-defined metrics
######### input config:
task:smatch
graph_file:pipeline/graph/amazon_google.graphml
write_edges:true
# input embedding file, mandatory for "stream" task
embeddings_file:pipeline/embeddings/amazon_google.emb
log_path:pipeline/logging
source_num:1362
######## output config
output_file_name:amazon_google-08_04_001

########## graph config:
### tn: token as number,### tt: token as text, ### idx: id of row, ### cid: id of column
### $ represent this value is a string, # represente number
### at the beginning, the number (1-7) represent class of this type of value, definition of different classes is written at file README
node_types:["7#__tn", "7$__tt", "3$__idx", "1$__cid"]
### [The graph algorithm will split all nodes with a prefix listed here]
flatten:tt
##### smooth: smooth/inverse_smooth/log/inverse/no
smoothing_method:no
directed:false

########### walks config:
write_walks:true
sentence_length:60
# Whether backtracking is allowed (whether it is possible to return to the previous node).
backtrack:false
random_walks_per_node:20
# random walk vis (statistics overview)
rw_stat:true

########## Embeddings configuration:
learning_method:skipgram
window_size:3
n_dimensions:300
# choices for training algo : word2vec, fasttext, doc2vec
training_algorithm:word2vec

########### sim list config:
most_similar_k:10
most_similar_inlist_n:10
show_m_most_similar:5
# strategy to calculate similarity: "basic" or "faiss"
strategy_suppl:faiss
# output format for silimarity list : {sqlite3, json, parquet}
output_format:db

########## kafka config:
kafka_topicid:entity_resolution_process
kafka_groupid:er_group
bootstrap_servers:localhost
port:9092
# strategy for sliding windows: "count" for count-based, "time" for time-based
window_strategy:count
window_count:136
# time interval to execute entity resolution task (s) 
window_time:3
# stride for sliding windows or update interval of time (s), 0 --> tumbling windows
update_frequency:0
